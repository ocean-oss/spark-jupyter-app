---
ocean:
  version: "1"
snapshots:
  - name: spark
    registry: docker_hub
    image: jupyter/all-spark-notebook
    tag: latest
steps:
  - engines:
    - name: spark_master
      vars:
        - name: private_ip
          value: "{{ engines.spark_master.deployment.nodes.main.private_ip }}"
        - name: port
          value: "{% reserve_private_port %}"
        - name: dashboard_port
          value: "{% reserve_public_port %}"
        - name: url
          value: "spark://{{ engines.spark_master.vars.private_ip }}:{{ engines.spark_master.vars.port }}"
      orchestrator:
        deployment_strategy: main
        snapshot_name: spark
        container:
          user: root
          workdir: /work
          mounts:
            app_files:
              - name: spark_master
                app_files_path: spark_master
                container_path: /ocean/etc/spark_master
                readonly: true
            data_stores: "{{ engines.spark_master.orchestrator.container.workdir }}"
            ssh: "/home/{{ workspace.user.name }}/.ssh"
          nodes:
            main:
              command: "{{ engines.spark_master.orchestrator.container.mounts.app_files.spark_master.container_path }}/startup.sh"
              env_vars:
                - name: SPARK_NO_DAEMONIZE
                  value: true
      ui:
        buttons:
          - node_target: main
            label: Spark Master Dashboard
            url: "http://{{ engines.spark_master.ui.buttons.self.node.public_ip }}:{{ engines.spark_master.vars.dashboard_port }}"
  - engines:
    - name: spark_worker
      vars:
        - name: port
          value: "{% reserve_private_port %}"
        - name: dashboard_port
          value: "{% reserve_public_port %}"
      orchestrator:
        deployment_strategy: workers_fill_pool
        snapshot_name: spark
        container:
          user: root
          workdir: /work
          mounts:
            app_files:
              - name: spark_worker
                app_files_path: spark_worker
                container_path: /ocean/etc/spark_worker
                readonly: true
            data_stores: "{{ engines.spark_worker.orchestrator.container.workdir }}"
            ssh: "/home/{{ workspace.user.name }}/.ssh"
          nodes:
            worker:
              command: "{{ engines.spark_worker.orchestrator.container.mounts.app_files.spark_worker.container_path }}/startup.sh"
              env_vars:
                - name: SPARK_NO_DAEMONIZE
                  value: true
      ui:
        buttons:
          - node_target: workers
            label: Spark Worker Dashboard
            url: "http://{{ engines.spark_worker.ui.buttons.self.node.public_ip }}:{{ engines.spark_worker.vars.dashboard_port }}"
    - name: jupyter
      vars:
        - name: port
          value: "{% reserve_public_port %}"
        - name: token
          value: "{% generate_uuid %}"
      orchestrator:
        deployment_strategy: main
        snapshot_name: spark
        container:
          user: root
          workdir: /work
          mounts:
            app_files:
              - name: jupyter
                app_files_path: jupyter
                container_path: /ocean/etc/jupyter
                readonly: true
            data_stores: "{{ engines.jupyter.orchestrator.container.workdir }}"
            ssh: "/home/{{ workspace.user.name }}/.ssh"
          nodes:
            main:
              command: "{{ engines.jupyter.orchestrator.container.mounts.app_files.jupyter.container_path }}/startup.sh"
              env_vars:
                - name: JUPYTER_ENABLE_LAB
                  value: "yes"
                - name: NB_UID
                  value: "{{ workspace.user.uid }}"
                - name: NB_GID
                  value: "{{ workspace.user.gid }}"
                - name: CHOWN_HOME
                  value: "yes"
                - name: GRANT_SUDO
                  value: "yes"
                - name: RESTARTABLE
                  value: "yes"
                - name: SPARK_MASTER
                  value: "{{ engines.spark_master.vars.url }}"
      ui:
        buttons:
          - node_target: main
            label: Jupyter Notebook
            url: "http://{{ engines.jupyter.ui.buttons.self.node.public_ip }}:{{ engines.jupyter.vars.port }}?token={{ engines.jupyter.vars.token }}"